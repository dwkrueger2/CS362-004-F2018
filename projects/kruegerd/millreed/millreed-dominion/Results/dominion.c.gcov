        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Reed Miller's revised dominion file with bugs
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:#define USE_CORRECTED_VERSION 1  // surrounds areas where bugs are corrected
        -:   10:
   149970:   11:int compare(const void* a, const void* b) {
   149970:   12:	if (*(int*)a > *(int*)b)
    #####:   13:		return 1;
   149970:   14:	if (*(int*)a < *(int*)b)
    39992:   15:		return -1;
   109978:   16:	return 0;
        -:   17:}
        -:   18:
    #####:   19:struct gameState* newGame() {
    #####:   20:	struct gameState* g = (gameState*)malloc(sizeof(struct gameState));
    #####:   21:	return g;
        -:   22:}
        -:   23:
    #####:   24:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   25:	int k8, int k9, int k10) {
    #####:   26:	int* k = (int*) malloc(10 * sizeof(int));
    #####:   27:	k[0] = k1;
    #####:   28:	k[1] = k2;
    #####:   29:	k[2] = k3;
    #####:   30:	k[3] = k4;
    #####:   31:	k[4] = k5;
    #####:   32:	k[5] = k6;
    #####:   33:	k[6] = k7;
    #####:   34:	k[7] = k8;
    #####:   35:	k[8] = k9;
    #####:   36:	k[9] = k10;
    #####:   37:	return k;
        -:   38:}
        -:   39:
     5000:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:	struct gameState *state) {
        -:   42:
        -:   43:	int i;
        -:   44:	int j;
        -:   45:	int it;
        -:   46:	//set up random number generator
     5000:   47:	SelectStream(1);
     5000:   48:	PutSeed((long)randomSeed);
        -:   49:
        -:   50:	//check number of players
     5000:   51:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   52:	{
    #####:   53:		return -1;
        -:   54:	}
        -:   55:
        -:   56:	//set number of players
     5000:   57:	state->numPlayers = numPlayers;
        -:   58:
        -:   59:	//check selected kingdom cards are different
    54995:   60:	for (i = 0; i < 10; i++)
        -:   61:	{
   549953:   62:		for (j = 0; j < 10; j++)
        -:   63:		{
   499958:   64:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   65:			{
        1:   66:				return -1;
        -:   67:			}
        -:   68:		}
        -:   69:	}
        -:   70:
        -:   71:
        -:   72:	//initialize supply
        -:   73:	///////////////////////////////
        -:   74:
        -:   75:	//set number of Curse cards
     4999:   76:	if (numPlayers == 2)
        -:   77:	{
     4999:   78:		state->supplyCount[curse] = 10;
        -:   79:	}
    #####:   80:	else if (numPlayers == 3)
        -:   81:	{
    #####:   82:		state->supplyCount[curse] = 20;
        -:   83:	}
        -:   84:	else
        -:   85:	{
    #####:   86:		state->supplyCount[curse] = 30;
        -:   87:	}
        -:   88:
        -:   89:	//set number of Victory cards
     4999:   90:	if (numPlayers == 2)
        -:   91:	{
     4999:   92:		state->supplyCount[estate] = 8;
     4999:   93:		state->supplyCount[duchy] = 8;
     4999:   94:		state->supplyCount[province] = 8;
        -:   95:	}
        -:   96:	else
        -:   97:	{
    #####:   98:		state->supplyCount[estate] = 12;
    #####:   99:		state->supplyCount[duchy] = 12;
    #####:  100:		state->supplyCount[province] = 12;
        -:  101:	}
        -:  102:
        -:  103:	//set number of Treasure cards
     4999:  104:	state->supplyCount[copper] = 60 - (7 * numPlayers);
     4999:  105:	state->supplyCount[silver] = 40;
     4999:  106:	state->supplyCount[gold] = 30;
        -:  107:
        -:  108:	//set number of Kingdom cards
   104979:  109:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  110:	{
   899820:  111:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  112:		{
   824835:  113:			if (kingdomCards[j] == i)
        -:  114:			{
        -:  115:				//check if card is a 'Victory' Kingdom card
    24995:  116:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:				{
     9998:  118:					if (numPlayers == 2) {
     4999:  119:						state->supplyCount[i] = 8;
        -:  120:					}
    #####:  121:					else { state->supplyCount[i] = 12; }
        -:  122:				}
        -:  123:				else
        -:  124:				{
    19996:  125:					state->supplyCount[i] = 10;
        -:  126:				}
    24995:  127:				break;
        -:  128:			}
        -:  129:			else    //card is not in the set choosen for the game
        -:  130:			{
   799840:  131:				state->supplyCount[i] = -1;
        -:  132:			}
        -:  133:		}
        -:  134:
        -:  135:	}
        -:  136:
        -:  137:	////////////////////////
        -:  138:	//supply intilization complete
        -:  139:
        -:  140:	//set player decks
    14997:  141:	for (i = 0; i < numPlayers; i++)
        -:  142:	{
     9998:  143:		state->deckCount[i] = 0;
    39992:  144:		for (j = 0; j < 3; j++)
        -:  145:		{
    29994:  146:			state->deck[i][j] = estate;
    29994:  147:			state->deckCount[i]++;
        -:  148:		}
    79984:  149:		for (j = 3; j < 10; j++)
        -:  150:		{
    69986:  151:			state->deck[i][j] = copper;
    69986:  152:			state->deckCount[i]++;
        -:  153:		}
        -:  154:	}
        -:  155:
        -:  156:	//shuffle player decks
    14997:  157:	for (i = 0; i < numPlayers; i++)
        -:  158:	{
     9998:  159:		if (shuffle(i, state) < 0)
        -:  160:		{
    #####:  161:			return -1;
        -:  162:		}
        -:  163:	}
        -:  164:
        -:  165:	//draw player hands
    14997:  166:	for (i = 0; i < numPlayers; i++)
        -:  167:	{
        -:  168:		//initialize hand size to zero
     9998:  169:		state->handCount[i] = 0;
     9998:  170:		state->discardCount[i] = 0;
        -:  171:		//draw 5 cards
        -:  172:		// for (j = 0; j < 5; j++)
        -:  173:		//	{
        -:  174:		//	  drawCard(i, state);
        -:  175:		//	}
        -:  176:	}
        -:  177:
        -:  178:	//set embargo tokens to 0 for all supply piles
   139972:  179:	for (i = 0; i <= treasure_map; i++)
        -:  180:	{
   134973:  181:		state->embargoTokens[i] = 0;
        -:  182:	}
        -:  183:
        -:  184:	//initialize first player's turn
     4999:  185:	state->outpostPlayed = 0;
     4999:  186:	state->phase = 0;
     4999:  187:	state->numActions = 1;
     4999:  188:	state->numBuys = 1;
     4999:  189:	state->playedCardCount = 0;
     4999:  190:	state->whoseTurn = 0;
     4999:  191:	state->handCount[state->whoseTurn] = 0;
        -:  192:	//int it; move to top
        -:  193:
        -:  194:	//Moved draw cards to here, only drawing at the start of a turn
    29994:  195:	for (it = 0; it < 5; it++) {
    24995:  196:		drawCard(state->whoseTurn, state);
        -:  197:	}
        -:  198:
     4999:  199:	updateCoins(state->whoseTurn, state, 0);
        -:  200:
     4999:  201:	return 0;
        -:  202:}
        -:  203:
     9998:  204:int shuffle(int player, struct gameState *state) {
        -:  205:
        -:  206:
        -:  207:	int newDeck[MAX_DECK];
     9998:  208:	int newDeckPos = 0;
        -:  209:	int card;
        -:  210:	int i;
        -:  211:
     9998:  212:	if (state->deckCount[player] < 1)
    #####:  213:		return -1;
     9998:  214:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  215:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
   119976:  217:	while (state->deckCount[player] > 0) {
    99980:  218:		card = floor(Random() * state->deckCount[player]);
    99980:  219:		newDeck[newDeckPos] = state->deck[player][card];
    99980:  220:		newDeckPos++;
   404919:  221:		for (i = card; i < state->deckCount[player] - 1; i++) {
   304939:  222:			state->deck[player][i] = state->deck[player][i + 1];
        -:  223:		}
    99980:  224:		state->deckCount[player]--;
        -:  225:	}
   109978:  226:	for (i = 0; i < newDeckPos; i++) {
    99980:  227:		state->deck[player][i] = newDeck[i];
    99980:  228:		state->deckCount[player]++;
        -:  229:	}
        -:  230:
     9998:  231:	return 0;
        -:  232:}
        -:  233:
    #####:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  235:{
        -:  236:	int card;
    #####:  237:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:	//check if it is the right phase
    #####:  240:	if (state->phase != 0)
        -:  241:	{
    #####:  242:		return -1;
        -:  243:	}
        -:  244:
        -:  245:	//check if player has enough actions
    #####:  246:	if (state->numActions < 1)
        -:  247:	{
    #####:  248:		return -1;
        -:  249:	}
        -:  250:
        -:  251:	//get card played
    #####:  252:	card = handCard(handPos, state);
        -:  253:
        -:  254:	//check if selected card is an action
    #####:  255:	if (card < adventurer || card > treasure_map)
        -:  256:	{
    #####:  257:		return -1;
        -:  258:	}
        -:  259:
        -:  260:	//play card
    #####:  261:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  262:	{
    #####:  263:		return -1;
        -:  264:	}
        -:  265:
        -:  266:	//reduce number of actions
    #####:  267:	state->numActions--;
        -:  268:
        -:  269:	//update coins (Treasure cards may be added with card draws)
    #####:  270:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  271:
    #####:  272:	return 0;
        -:  273:}
        -:  274:
    #####:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:	int who;
        -:  277:	if (DEBUG) {
        -:  278:		printf("Entering buyCard...\n");
        -:  279:	}
        -:  280:
        -:  281:	// I don't know what to do about the phase thing.
        -:  282:
    #####:  283:	who = state->whoseTurn;
        -:  284:
    #####:  285:	if (state->numBuys < 1) {
        -:  286:		if (DEBUG)
        -:  287:			printf("You do not have any buys left\n");
    #####:  288:		return -1;
        -:  289:	}
    #####:  290:	else if (supplyCount(supplyPos, state) < 1) {
        -:  291:		if (DEBUG)
        -:  292:			printf("There are not any of that type of card left\n");
    #####:  293:		return -1;
        -:  294:	}
    #####:  295:	else if (state->coins < getCost(supplyPos)) {
        -:  296:		if (DEBUG)
        -:  297:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  298:		return -1;
        -:  299:	}
        -:  300:	else {
    #####:  301:		state->phase = 1;
        -:  302:		//state->supplyCount[supplyPos]--;
    #####:  303:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:
    #####:  305:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:		state->numBuys--;
        -:  307:		if (DEBUG)
        -:  308:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:	}
        -:  310:
        -:  311:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:	//state->discardCount[who]++;
        -:  313:
    #####:  314:	return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:	return state->handCount[whoseTurn(state)];
        -:  319:}
        -:  320:
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:	int currentPlayer = whoseTurn(state);
    #####:  323:	return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:	return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:	int i;
    #####:  332:	int count = 0;
        -:  333:
    #####:  334:	for (i = 0; i < state->deckCount[player]; i++)
        -:  335:	{
    #####:  336:		if (state->deck[player][i] == card) count++;
        -:  337:	}
        -:  338:
    #####:  339:	for (i = 0; i < state->handCount[player]; i++)
        -:  340:	{
    #####:  341:		if (state->hand[player][i] == card) count++;
        -:  342:	}
        -:  343:
    #####:  344:	for (i = 0; i < state->discardCount[player]; i++)
        -:  345:	{
    #####:  346:		if (state->discard[player][i] == card) count++;
        -:  347:	}
        -:  348:
    #####:  349:	return count;
        -:  350:}
        -:  351:
    10000:  352:int whoseTurn(struct gameState *state) {
    10000:  353:	return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:	int k;
        -:  358:	int i;
    #####:  359:	int currentPlayer = whoseTurn(state);
        -:  360:
        -:  361:	//Discard hand
    #####:  362:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  363:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:	}
    #####:  366:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:
        -:  368:	//Code for determining the player
    #####:  369:	if (currentPlayer < (state->numPlayers - 1)) {
    #####:  370:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:	}
        -:  372:	else {
    #####:  373:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:	}
        -:  375:
    #####:  376:	state->outpostPlayed = 0;
    #####:  377:	state->phase = 0;
    #####:  378:	state->numActions = 1;
    #####:  379:	state->coins = 0;
    #####:  380:	state->numBuys = 1;
    #####:  381:	state->playedCardCount = 0;
    #####:  382:	state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:	//int k; move to top
        -:  385:	//Next player draws hand
    #####:  386:	for (k = 0; k < 5; k++) {
    #####:  387:		drawCard(state->whoseTurn, state);//Draw a card
        -:  388:	}
        -:  389:
        -:  390:	//Update money
    #####:  391:	updateCoins(state->whoseTurn, state, 0);
        -:  392:
    #####:  393:	return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:	int i;
        -:  398:	int j;
        -:  399:
        -:  400:	//if stack of Province cards is empty, the game ends
    #####:  401:	if (state->supplyCount[province] == 0)
        -:  402:	{
    #####:  403:		return 1;
        -:  404:	}
        -:  405:
        -:  406:	//if three supply pile are at 0, the game ends
    #####:  407:	j = 0;
    #####:  408:	for (i = 0; i < 25; i++)
        -:  409:	{
    #####:  410:		if (state->supplyCount[i] == 0)
        -:  411:		{
    #####:  412:			j++;
        -:  413:		}
        -:  414:	}
    #####:  415:	if (j >= 3)
        -:  416:	{
    #####:  417:		return 1;
        -:  418:	}
        -:  419:
    #####:  420:	return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor(int player, struct gameState *state) {
        -:  424:
        -:  425:	int i;
    #####:  426:	int score = 0;
        -:  427:	//score from hand
    #####:  428:	for (i = 0; i < state->handCount[player]; i++)
        -:  429:	{
    #####:  430:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  436:	}
        -:  437:
        -:  438:	//score from discard
    #####:  439:	for (i = 0; i < state->discardCount[player]; i++)
        -:  440:	{
    #####:  441:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  447:	}
        -:  448:
        -:  449:	//score from deck
    #####:  450:	for (i = 0; i < state->discardCount[player]; i++)
        -:  451:	{
    #####:  452:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  458:	}
        -:  459:
    #####:  460:	return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:	int i;
        -:  465:	int j;
        -:  466:	int highScore;
        -:  467:	int currentPlayer;
        -:  468:
        -:  469:	//get score for each player
    #####:  470:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:	{
        -:  472:		//set unused player scores to -9999
    #####:  473:		if (i >= state->numPlayers)
        -:  474:		{
    #####:  475:			players[i] = -9999;
        -:  476:		}
        -:  477:		else
        -:  478:		{
    #####:  479:			players[i] = scoreFor(i, state);
        -:  480:		}
        -:  481:	}
        -:  482:
        -:  483:	//find highest score
    #####:  484:	j = 0;
    #####:  485:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:	{
    #####:  487:		if (players[i] > players[j])
        -:  488:		{
    #####:  489:			j = i;
        -:  490:		}
        -:  491:	}
    #####:  492:	highScore = players[j];
        -:  493:
        -:  494:	//add 1 to players who had less turns
    #####:  495:	currentPlayer = whoseTurn(state);
    #####:  496:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:	{
    #####:  498:		if (players[i] == highScore && i > currentPlayer)
        -:  499:		{
    #####:  500:			players[i]++;
        -:  501:		}
        -:  502:	}
        -:  503:
        -:  504:	//find new highest score
    #####:  505:	j = 0;
    #####:  506:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:	{
    #####:  508:		if (players[i] > players[j])
        -:  509:		{
    #####:  510:			j = i;
        -:  511:		}
        -:  512:	}
    #####:  513:	highScore = players[j];
        -:  514:
        -:  515:	//set winners in array to 1 and rest to 0
    #####:  516:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:	{
    #####:  518:		if (players[i] == highScore)
        -:  519:		{
    #####:  520:			players[i] = 1;
        -:  521:		}
        -:  522:		else
        -:  523:		{
    #####:  524:			players[i] = 0;
        -:  525:		}
        -:  526:	}
        -:  527:
    #####:  528:	return 0;
        -:  529:}
        -:  530:
    24995:  531:int drawCard(int player, struct gameState *state)
        -:  532:{
        -:  533:	int count;
        -:  534:	int deckCounter;
    24995:  535:	if (state->deckCount[player] <= 0) {//Deck is empty
        -:  536:
        -:  537:		//Step 1 Shuffle the discard pile back into a deck
        -:  538:		int i;
        -:  539:		//Move discard to deck
    #####:  540:		for (i = 0; i < state->discardCount[player]; i++) {
    #####:  541:			state->deck[player][i] = state->discard[player][i];
    #####:  542:			state->discard[player][i] = -1;
        -:  543:		}
        -:  544:
    #####:  545:		state->deckCount[player] = state->discardCount[player];
    #####:  546:		state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:		//Shufffle the deck
    #####:  549:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:
        -:  551:		if (DEBUG) {//Debug statements
        -:  552:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:		}
        -:  554:
    #####:  555:		state->discardCount[player] = 0;
        -:  556:
        -:  557:		//Step 2 Draw Card
    #####:  558:		count = state->handCount[player];//Get current player's hand count
        -:  559:
        -:  560:		if (DEBUG) {//Debug statements
        -:  561:			printf("Current hand count: %d\n", count);
        -:  562:		}
        -:  563:
    #####:  564:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
    #####:  566:		if (deckCounter == 0)
    #####:  567:			return -1;
        -:  568:
    #####:  569:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  570:		state->deckCount[player]--;
    #####:  571:		state->handCount[player]++;//Increment hand count
        -:  572:	}
        -:  573:
        -:  574:	else {
    24995:  575:		int count = state->handCount[player];//Get current hand count for player
        -:  576:		int deckCounter;
        -:  577:		if (DEBUG) {//Debug statements
        -:  578:			printf("Current hand count: %d\n", count);
        -:  579:		}
        -:  580:
    24995:  581:		deckCounter = state->deckCount[player];//Create holder for the deck count
    24995:  582:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    24995:  583:		state->deckCount[player]--;
    24995:  584:		state->handCount[player]++;//Increment hand count
        -:  585:	}
        -:  586:
    24995:  587:	return 0;
        -:  588:}
        -:  589:
    #####:  590:int getCost(int cardNumber)
        -:  591:{
    #####:  592:	switch (cardNumber)
        -:  593:	{
        -:  594:		case curse:
    #####:  595:			return 0;
        -:  596:		case estate:
    #####:  597:			return 2;
        -:  598:		case duchy:
    #####:  599:			return 5;
        -:  600:		case province:
    #####:  601:			return 8;
        -:  602:		case copper:
    #####:  603:			return 0;
        -:  604:		case silver:
    #####:  605:			return 3;
        -:  606:		case gold:
    #####:  607:			return 6;
        -:  608:		case adventurer:
    #####:  609:			return 6;
        -:  610:		case council_room:
    #####:  611:			return 5;
        -:  612:		case feast:
    #####:  613:			return 4;
        -:  614:		case gardens:
    #####:  615:			return 4;
        -:  616:		case mine:
    #####:  617:			return 5;
        -:  618:		case remodel:
    #####:  619:			return 4;
        -:  620:		case smithy:
    #####:  621:			return 4;
        -:  622:		case village:
    #####:  623:			return 3;
        -:  624:		case baron:
    #####:  625:			return 4;
        -:  626:		case great_hall:
    #####:  627:			return 3;
        -:  628:		case minion:
    #####:  629:			return 5;
        -:  630:		case steward:
    #####:  631:			return 3;
        -:  632:		case tribute:
    #####:  633:			return 5;
        -:  634:		case ambassador:
    #####:  635:			return 3;
        -:  636:		case cutpurse:
    #####:  637:			return 4;
        -:  638:		case embargo:
    #####:  639:			return 2;
        -:  640:		case outpost:
    #####:  641:			return 5;
        -:  642:		case salvager:
    #####:  643:			return 4;
        -:  644:		case sea_hag:
    #####:  645:			return 4;
        -:  646:		case treasure_map:
    #####:  647:			return 4;
        -:  648:	}
        -:  649:
    #####:  650:	return -1;
        -:  651:}
        -:  652:
    #####:  653:int adventurer_card(struct gameState *state, int currentPlayer, int *drawntreasure, int *z, int *nextPlayer)
        -:  654:{
        -:  655:	int temphand[MAX_HAND];
        -:  656:	int cardDrawn;
        -:  657:
    #####:  658:	while (*drawntreasure < 2) {
    #####:  659:		if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  660:			shuffle(currentPlayer, state);
        -:  661:		}
    #####:  662:		drawCard(currentPlayer, state);
    #####:  663:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  664:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  665:			*drawntreasure += 1;
        -:  666:		else {
    #####:  667:			temphand[*z] = cardDrawn;
    #####:  668:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  669:			*z += 1;
        -:  670:		}
        -:  671:	}
    #####:  672:	while (*z - 1 >= 0) {
    #####:  673:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[*z - 1]; // discard all cards in play that have been drawn
    #####:  674:		z = z - 1;
        -:  675:	}
    #####:  676:	return 0;
        -:  677:}
        -:  678:
    #####:  679:int smithy_card(int currentPlayer, struct gameState *state, int handPos)
        -:  680:{
        -:  681:	int i;
        -:  682:	//+3 Cards
    #####:  683:	for (i = 1; i < 3; i++)
        -:  684:	{
    #####:  685:		drawCard(currentPlayer, state);
        -:  686:	}
        -:  687:
        -:  688:	//discard card from hand
    #####:  689:	discardCard(handPos, currentPlayer, state, 0);
    #####:  690:	return 0;
        -:  691:}
        -:  692:
    #####:  693:int council_room_card(int currentPlayer, struct gameState *state, int handPos)
        -:  694:{
        -:  695:	int i;
        -:  696:	//+4 Cards
    #####:  697:	for (i = 0; i < 4; i++)
        -:  698:	{
    #####:  699:		drawCard(currentPlayer, state);
        -:  700:	}
        -:  701:
        -:  702:	//+1 Buy
    #####:  703:	state->numBuys++;
        -:  704:
        -:  705:	//Each other player draws a card
    #####:  706:	for (i = 0; i < state->numPlayers; i++)
        -:  707:	{
    #####:  708:		if (i == currentPlayer)
        -:  709:		{
    #####:  710:			drawCard(i, state);
        -:  711:		}
        -:  712:	}
        -:  713:
        -:  714:	//put played card in played card pile
    #####:  715:	discardCard(handPos, currentPlayer, state, 0);
        -:  716:
    #####:  717:	return 0;
        -:  718:}
        -:  719:
    #####:  720:int mine_card(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos)
        -:  721:{
        -:  722:	int i, j;
        -:  723:
    #####:  724:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  725:
    #####:  726:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  727:	{
    #####:  728:		return -1;
        -:  729:	}
        -:  730:
    #####:  731:	if (choice2 > treasure_map || choice2 < curse)
        -:  732:	{
    #####:  733:		return -1;
        -:  734:	}
        -:  735:
    #####:  736:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  737:	{
    #####:  738:		return -1;
        -:  739:	}
        -:  740:
    #####:  741:	gainCard(choice2, state, 2, currentPlayer);
        -:  742:
        -:  743:	//discard card from hand
    #####:  744:	discardCard(handPos, currentPlayer, state, 0);
        -:  745:
        -:  746:	//discard trashed card
    #####:  747:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  748:	{
    #####:  749:		if (state->hand[currentPlayer][i] == j)
        -:  750:		{
    #####:  751:			discardCard(i, currentPlayer, state, 0);
    #####:  752:			break;
        -:  753:		}
        -:  754:	}
        -:  755:
    #####:  756:	return 0;
        -:  757:}
        -:  758:
    #####:  759:int minion_card(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2)
        -:  760:{
        -:  761:	int i, j;
        -:  762:	//+1 action
    #####:  763:	state->numActions++;
        -:  764:
        -:  765:	//discard card from hand
    #####:  766:	discardCard(handPos, currentPlayer, state, 0);
        -:  767:
    #####:  768:	if (choice1)		//+2 coins
        -:  769:	{
    #####:  770:		state->coins = state->coins + 2;
        -:  771:	}
        -:  772:
    #####:  773:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  774:	{
        -:  775:		//discard hand
    #####:  776:		if (numHandCards(state) > 0)
        -:  777:		{
    #####:  778:			discardCard(handPos, currentPlayer, state, 0);
        -:  779:		}
        -:  780:
        -:  781:		//draw 4
    #####:  782:		for (i = 0; i < 4; i++)
        -:  783:		{
    #####:  784:			drawCard(currentPlayer, state);
        -:  785:		}
        -:  786:
        -:  787:		//other players discard hand and redraw if hand size > 4
    #####:  788:		for (i = 0; i < state->numPlayers; i++)
        -:  789:		{
    #####:  790:			if (i != currentPlayer)
        -:  791:			{
    #####:  792:				if (state->handCount[i] > 4)
        -:  793:				{
        -:  794:					//discard hand
    #####:  795:					while (state->handCount[i] > 0)
        -:  796:					{
    #####:  797:						discardCard(handPos, i, state, 0);
        -:  798:					}
        -:  799:
        -:  800:					//draw 4
    #####:  801:					for (j = 0; j < 4; j++)
        -:  802:					{
    #####:  803:						drawCard(i, state);
        -:  804:					}
        -:  805:				}
        -:  806:			}
        -:  807:		}
        -:  808:
        -:  809:	}
    #####:  810:	return 0;
        -:  811:}
        -:  812:
     5000:  813:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  814:{
        -:  815:	int i;
        -:  816:	int j;
        -:  817:	int k;
        -:  818:	int x;
        -:  819:	int index;
     5000:  820:	int currentPlayer = whoseTurn(state);
     5000:  821:	int nextPlayer = currentPlayer + 1;
        -:  822:
     5000:  823:	int tributeRevealedCards[2] = { -1, -1 };
        -:  824:	int temphand[MAX_HAND];// moved above the if statement
     5000:  825:	int drawntreasure = 0;
     5000:  826:	int z = 0;// this is the counter for the temp hand
     5000:  827:	if (nextPlayer > (state->numPlayers - 1)) {
    #####:  828:		nextPlayer = 0;
        -:  829:	}
        -:  830:
        -:  831:	//uses switch to select card and perform actions
     5000:  832:	switch (card)
        -:  833:	{
        -:  834:		
        -:  835:		case adventurer:
        -:  836:
    #####:  837:			return adventurer_card(state, currentPlayer, &drawntreasure, &z, &nextPlayer);
        -:  838:
        -:  839:		case council_room:
    #####:  840:			return council_room_card(currentPlayer, state, handPos);
        -:  841:
        -:  842:		case feast:
        -:  843:			//gain card with cost up to 5
        -:  844:			//Backup hand
    #####:  845:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  846:				temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  847:				state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  848:			}
        -:  849:			//Backup hand
        -:  850:
        -:  851:			//Update Coins for Buy
    #####:  852:			updateCoins(currentPlayer, state, 5);
    #####:  853:			x = 1;//Condition to loop on
    #####:  854:			while (x == 1) {//Buy one card
    #####:  855:				if (supplyCount(choice1, state) <= 0) {
        -:  856:					if (DEBUG)
        -:  857:						printf("None of that card left, sorry!\n");
        -:  858:
        -:  859:					if (DEBUG) {
        -:  860:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  861:					}
        -:  862:				}
    #####:  863:				else if (state->coins < getCost(choice1)) {
    #####:  864:					printf("That card is too expensive!\n");
        -:  865:
        -:  866:					if (DEBUG) {
        -:  867:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  868:					}
        -:  869:				}
        -:  870:				else {
        -:  871:
        -:  872:					if (DEBUG) {
        -:  873:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  874:					}
        -:  875:
    #####:  876:					gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  877:					x = 0;//No more buying cards
        -:  878:
        -:  879:					if (DEBUG) {
        -:  880:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  881:					}
        -:  882:
        -:  883:				}
        -:  884:			}
        -:  885:
        -:  886:			//Reset Hand
    #####:  887:			for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  888:				state->hand[currentPlayer][i] = temphand[i];
    #####:  889:				temphand[i] = -1;
        -:  890:			}
        -:  891:			//Reset Hand
        -:  892:
    #####:  893:			return 0;
        -:  894:
        -:  895:		case gardens:
    #####:  896:			return -1;
        -:  897:
        -:  898:		case mine:
    #####:  899:			return mine_card(state, currentPlayer, choice1, choice2, handPos);
        -:  900:
        -:  901:		case remodel:
    #####:  902:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  903:
    #####:  904:			if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  905:			{
    #####:  906:				return -1;
        -:  907:			}
        -:  908:
    #####:  909:			gainCard(choice2, state, 0, currentPlayer);
        -:  910:
        -:  911:			//discard card from hand
    #####:  912:			discardCard(handPos, currentPlayer, state, 0);
        -:  913:
        -:  914:			//discard trashed card
    #####:  915:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  916:			{
    #####:  917:				if (state->hand[currentPlayer][i] == j)
        -:  918:				{
    #####:  919:					discardCard(i, currentPlayer, state, 0);
    #####:  920:					break;
        -:  921:				}
        -:  922:			}
        -:  923:
        -:  924:
    #####:  925:			return 0;
        -:  926:
        -:  927:		case smithy:
    #####:  928:			return smithy_card(currentPlayer, state, handPos);
        -:  929:
        -:  930:		case village:
        -:  931:			//+1 Card
    #####:  932:			drawCard(currentPlayer, state);
        -:  933:
        -:  934:			//+2 Actions
    #####:  935:			state->numActions = state->numActions + 2;
        -:  936:
        -:  937:			//discard played card from hand
    #####:  938:			discardCard(handPos, currentPlayer, state, 0);
    #####:  939:			return 0;
        -:  940:
        -:  941:		case baron:
    #####:  942:			state->numBuys++;//Increase buys by 1!
    #####:  943:			if (choice1 > 0) {//Boolean true or going to discard an estate
    #####:  944:				int p = 0;//Iterator for hand!
    #####:  945:				int card_not_discarded = 1;//Flag for discard set!
    #####:  946:				while (card_not_discarded) {
    #####:  947:					if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####:  948:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  949:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  950:						state->discardCount[currentPlayer]++;
    #####:  951:						for (; p < state->handCount[currentPlayer]; p++) {
    #####:  952:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  953:						}
    #####:  954:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  955:						state->handCount[currentPlayer]--;
    #####:  956:						card_not_discarded = 0;//Exit the loop
        -:  957:					}
    #####:  958:					else if (p > state->handCount[currentPlayer]) {
        -:  959:						if (DEBUG) {
        -:  960:							printf("No estate cards in your hand, invalid choice\n");
        -:  961:							printf("Must gain an estate if there are any\n");
        -:  962:						}
    #####:  963:						if (supplyCount(estate, state) > 0) {
    #####:  964:							gainCard(estate, state, 0, currentPlayer);
    #####:  965:							state->supplyCount[estate]--;//Decrement estates
    #####:  966:							if (supplyCount(estate, state) == 0) {
    #####:  967:								isGameOver(state);
        -:  968:							}
        -:  969:						}
    #####:  970:						card_not_discarded = 0;//Exit the loop
        -:  971:					}
        -:  972:
        -:  973:					else {
    #####:  974:						p++;//Next card
        -:  975:					}
        -:  976:				}
        -:  977:			}
        -:  978:
        -:  979:			else {
    #####:  980:				if (supplyCount(estate, state) > 0) {
    #####:  981:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  982:					state->supplyCount[estate]--;//Decrement Estates
    #####:  983:					if (supplyCount(estate, state) == 0) {
    #####:  984:						isGameOver(state);
        -:  985:					}
        -:  986:				}
        -:  987:			}
        -:  988:
        -:  989:
    #####:  990:			return 0;
        -:  991:		case great_hall:
        -:  992:			//+1 Card
    #####:  993:			drawCard(currentPlayer, state);
        -:  994:
        -:  995:			//+1 Actions
    #####:  996:			state->numActions++;
        -:  997:
        -:  998:			//discard card from hand
    #####:  999:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1000:			return 0;
        -: 1001:
        -: 1002:		case minion:
    #####: 1003:			return minion_card(state, handPos, currentPlayer, choice1, choice2);
        -: 1004:
        -: 1005:		case steward:
    #####: 1006:			if (choice1 == 1)
        -: 1007:			{
        -: 1008:				//+2 cards
    #####: 1009:				drawCard(currentPlayer, state);
    #####: 1010:				drawCard(currentPlayer, state);
        -: 1011:			}
    #####: 1012:			else if (choice1 == 2)
        -: 1013:			{
        -: 1014:				//+2 coins
    #####: 1015:				state->coins = state->coins + 2;
        -: 1016:			}
        -: 1017:			else
        -: 1018:			{
        -: 1019:				//trash 2 cards in hand
    #####: 1020:				discardCard(choice2, currentPlayer, state, 1);
    #####: 1021:				discardCard(choice3, currentPlayer, state, 1);
        -: 1022:			}
        -: 1023:
        -: 1024:			//discard card from hand
    #####: 1025:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:			return 0;
        -: 1027:
        -: 1028:		case tribute:
    #####: 1029:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####: 1030:				if (state->deckCount[nextPlayer] > 0) {
    #####: 1031:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1032:					state->deckCount[nextPlayer]--;
        -: 1033:				}
    #####: 1034:				else if (state->discardCount[nextPlayer] > 0) {
    #####: 1035:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1036:					state->discardCount[nextPlayer]--;
        -: 1037:				}
        -: 1038:				else {
        -: 1039:					//No Card to Reveal
        -: 1040:					if (DEBUG) {
        -: 1041:						printf("No cards to reveal\n");
        -: 1042:					}
        -: 1043:				}
        -: 1044:			}
        -: 1045:
        -: 1046:			else {
    #####: 1047:				if (state->deckCount[nextPlayer] == 0) {
    #####: 1048:					for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####: 1049:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1050:						state->deckCount[nextPlayer]++;
    #####: 1051:						state->discard[nextPlayer][i] = -1;
    #####: 1052:						state->discardCount[nextPlayer]--;
        -: 1053:					}
        -: 1054:
    #####: 1055:					shuffle(nextPlayer, state);//Shuffle the deck
        -: 1056:				}
    #####: 1057:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1058:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1059:				state->deckCount[nextPlayer]--;
    #####: 1060:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1061:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:				state->deckCount[nextPlayer]--;
        -: 1063:			}
        -: 1064:
    #####: 1065:			if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
    #####: 1066:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1067:				state->playedCardCount++;
    #####: 1068:				tributeRevealedCards[1] = -1;
        -: 1069:			}
        -: 1070:
    #####: 1071:			for (i = 0; i <= 2; i++) {
    #####: 1072:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####: 1073:					state->coins += 2;
        -: 1074:				}
        -: 1075:
    #####: 1076:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####: 1077:					drawCard(currentPlayer, state);
    #####: 1078:					drawCard(currentPlayer, state);
        -: 1079:				}
        -: 1080:				else {//Action Card
    #####: 1081:					state->numActions = state->numActions + 2;
        -: 1082:				}
        -: 1083:			}
        -: 1084:
    #####: 1085:			return 0;
        -: 1086:
        -: 1087:		case ambassador:
    #####: 1088:			j = 0;		//used to check if player has enough cards to discard
        -: 1089:
    #####: 1090:			if (choice2 > 2 || choice2 < 0)
        -: 1091:			{
    #####: 1092:				return -1;
        -: 1093:			}
        -: 1094:
    #####: 1095:			if (choice1 == handPos)
        -: 1096:			{
    #####: 1097:				return -1;
        -: 1098:			}
        -: 1099:
    #####: 1100:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1101:			{
    #####: 1102:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1103:				{
    #####: 1104:					j++;
        -: 1105:				}
        -: 1106:			}
    #####: 1107:			if (j < choice2)
        -: 1108:			{
    #####: 1109:				return -1;
        -: 1110:			}
        -: 1111:
        -: 1112:			if (DEBUG)
        -: 1113:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1114:
        -: 1115:			//increase supply count for choosen card by amount being discarded
    #####: 1116:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1117:
        -: 1118:			//each other player gains a copy of revealed card
    #####: 1119:			for (i = 0; i < state->numPlayers; i++)
        -: 1120:			{
    #####: 1121:				if (i != currentPlayer)
        -: 1122:				{
    #####: 1123:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1124:				}
        -: 1125:			}
        -: 1126:
        -: 1127:			//discard played card from hand
    #####: 1128:			discardCard(handPos, currentPlayer, state, 0);
        -: 1129:
        -: 1130:			//trash copies of cards returned to supply
    #####: 1131:			for (j = 0; j < choice2; j++)
        -: 1132:			{
    #####: 1133:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1134:				{
    #####: 1135:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1136:					{
    #####: 1137:						discardCard(i, currentPlayer, state, 1);
    #####: 1138:						break;
        -: 1139:					}
        -: 1140:				}
        -: 1141:			}
        -: 1142:
    #####: 1143:			return 0;
        -: 1144:
        -: 1145:		case cutpurse:
        -: 1146:
     5000: 1147:			updateCoins(currentPlayer, state, 2);
    15000: 1148:			for (i = 0; i < state->numPlayers; i++)
        -: 1149:			{
    10000: 1150:				if (i != currentPlayer)
        -: 1151:				{
    53714: 1152:					for (j = 0; j < state->handCount[i]; j++)
        -: 1153:					{
    50392: 1154:						if (state->hand[i][j] == copper)
        -: 1155:						{
        -: 1156:						#ifdef USE_CORRECTED_VERSION   // surrounds areas where bugs are corrected
        -: 1157:							// move player i's j'th card to their discard stack
     1678: 1158:							state->discard[i][state->discardCount[i]] = state->hand[i][j];
     1678: 1159:							state->discardCount[i]++;
     1678: 1160:							if (j == (state->handCount[i] - 1)) // last card in deck
       88: 1161:								state->handCount[i]--; //
        -: 1162:							else {
     1590: 1163:								state->hand[i][j] = state->hand[i][state->handCount[i] - 1]; // move last card in hand to position j
     1590: 1164:								state->handCount[i]--;
        -: 1165:							}
        -: 1166:						#else
        -: 1167:							discardCard(j, i, state, 0);  // problem is this moves card to played stack for current player
        -: 1168:						#endif
     1678: 1169:							break;
        -: 1170:						}
    48714: 1171:						if (j == state->handCount[i])
        -: 1172:						{
    #####: 1173:							for (k = 0; k < state->handCount[i]; k++)
        -: 1174:							{
        -: 1175:								if (DEBUG)
        -: 1176:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1177:							}
    #####: 1178:							break;
        -: 1179:						}
        -: 1180:					}
        -: 1181:
        -: 1182:				}
        -: 1183:
        -: 1184:			}
        -: 1185:		
        -: 1186:			//discard played card from hand
     5000: 1187:			discardCard(handPos, currentPlayer, state, 0);
     5000: 1188:			return 0;
        -: 1189:
        -: 1190:
        -: 1191:		case embargo:
        -: 1192:			//+2 Coins
    #####: 1193:			state->coins = state->coins + 2;
        -: 1194:
        -: 1195:			//see if selected pile is in play
    #####: 1196:			if (state->supplyCount[choice1] == -1)
        -: 1197:			{
    #####: 1198:				return -1;
        -: 1199:			}
        -: 1200:
        -: 1201:			//add embargo token to selected supply pile
    #####: 1202:			state->embargoTokens[choice1]++;
        -: 1203:
        -: 1204:			//trash card
    #####: 1205:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1206:			return 0;
        -: 1207:
        -: 1208:		case outpost:
        -: 1209:			//set outpost flag
    #####: 1210:			state->outpostPlayed++;
        -: 1211:
        -: 1212:			//discard card
    #####: 1213:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1214:			return 0;
        -: 1215:
        -: 1216:		case salvager:
        -: 1217:			//+1 buy
    #####: 1218:			state->numBuys++;
        -: 1219:
    #####: 1220:			if (choice1)
        -: 1221:			{
        -: 1222:				//gain coins equal to trashed card
    #####: 1223:				state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1224:				//trash card
    #####: 1225:				discardCard(choice1, currentPlayer, state, 1);
        -: 1226:			}
        -: 1227:
        -: 1228:			//discard card
    #####: 1229:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1230:			return 0;
        -: 1231:
        -: 1232:		case sea_hag:
    #####: 1233:			for (i = 0; i < state->numPlayers; i++) {
    #####: 1234:				if (i != currentPlayer) {
    #####: 1235:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1236:					state->discardCount[i]++;
    #####: 1237:					state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1238:				}
        -: 1239:			}
    #####: 1240:			return 0;
        -: 1241:
        -: 1242:		case treasure_map:
        -: 1243:			//search hand for another treasure_map
    #####: 1244:			index = -1;
    #####: 1245:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1246:			{
    #####: 1247:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1248:				{
    #####: 1249:					index = i;
    #####: 1250:					break;
        -: 1251:				}
        -: 1252:			}
    #####: 1253:			if (index > -1)
        -: 1254:			{
        -: 1255:				//trash both treasure cards
    #####: 1256:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1257:				discardCard(index, currentPlayer, state, 1);
        -: 1258:
        -: 1259:				//gain 4 Gold cards
    #####: 1260:				for (i = 0; i < 4; i++)
        -: 1261:				{
    #####: 1262:					gainCard(gold, state, 1, currentPlayer);
        -: 1263:				}
        -: 1264:
        -: 1265:				//return success
    #####: 1266:				return 1;
        -: 1267:			}
        -: 1268:
        -: 1269:			//no second treasure_map found in hand
    #####: 1270:			return -1;
        -: 1271:	}
        -: 1272:
    #####: 1273:	return -1;
        -: 1274:}
        -: 1275:
     5000: 1276:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1277:{
        -: 1278:
        -: 1279:	//if card is not trashed, added to Played pile
     5000: 1280:	if (trashFlag < 1)
        -: 1281:	{
        -: 1282:		//add card to played pile
     5000: 1283:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     5000: 1284:		state->playedCardCount++;
        -: 1285:
        -: 1286:	}
        -: 1287:
        -: 1288:	//set played card to -1
     5000: 1289:	state->hand[currentPlayer][handPos] = -1;
        -: 1290:
        -: 1291:	//remove card from player's hand
     5000: 1292:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
        -: 1293:	{
        -: 1294:		//reduce number of cards in hand
      191: 1295:		state->handCount[currentPlayer]--;
        -: 1296:	}
     4809: 1297:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1298:	{
        -: 1299:		//reduce number of cards in hand
    #####: 1300:		state->handCount[currentPlayer]--;
        -: 1301:	}
        -: 1302:	else
        -: 1303:	{
        -: 1304:		//replace discarded card with last card in hand
     4809: 1305:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1306:		//set last card to -1
     4809: 1307:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1308:		//reduce number of cards in hand
     4809: 1309:		state->handCount[currentPlayer]--;
        -: 1310:	}
        -: 1311:
     5000: 1312:	return 0;
        -: 1313:}
        -: 1314:
    #####: 1315:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1316:{
        -: 1317:	//Note: supplyPos is enum of choosen card
        -: 1318:
        -: 1319:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1320:	if (supplyCount(supplyPos, state) < 1)
        -: 1321:	{
    #####: 1322:		return -1;
        -: 1323:	}
        -: 1324:
        -: 1325:	//added card for [whoseTurn] current player:
        -: 1326:	// toFlag = 0 : add to discard
        -: 1327:	// toFlag = 1 : add to deck
        -: 1328:	// toFlag = 2 : add to hand
        -: 1329:
    #####: 1330:	if (toFlag == 1)
        -: 1331:	{
    #####: 1332:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1333:		state->deckCount[player]++;
        -: 1334:	}
    #####: 1335:	else if (toFlag == 2)
        -: 1336:	{
    #####: 1337:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1338:		state->handCount[player]++;
        -: 1339:	}
        -: 1340:	else
        -: 1341:	{
    #####: 1342:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1343:		state->discardCount[player]++;
        -: 1344:	}
        -: 1345:
        -: 1346:	//decrease number in supply pile
    #####: 1347:	state->supplyCount[supplyPos]--;
        -: 1348:
    #####: 1349:	return 0;
        -: 1350:}
        -: 1351:
     9999: 1352:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1353:{
        -: 1354:	int i;
        -: 1355:
        -: 1356:	//reset coin count
     9999: 1357:	state->coins = 0;
        -: 1358:
        -: 1359:	//add coins for each Treasure card in player's hand
   100360: 1360:	for (i = 0; i < state->handCount[player]; i++)
        -: 1361:	{
    90361: 1362:		if (state->hand[player][i] == copper)
        -: 1363:		{
    22204: 1364:			state->coins += 1;
        -: 1365:		}
    68157: 1366:		else if (state->hand[player][i] == silver)
        -: 1367:		{
     2219: 1368:			state->coins += 2;
        -: 1369:		}
    65938: 1370:		else if (state->hand[player][i] == gold)
        -: 1371:		{
     2311: 1372:			state->coins += 3;
        -: 1373:		}
        -: 1374:	}
        -: 1375:
        -: 1376:	//add bonus
     9999: 1377:	state->coins += bonus;
        -: 1378:
     9999: 1379:	return 0;
        -: 1380:}
        -: 1381:
        -: 1382:
        -: 1383://end of dominion.c
        -: 1384:
